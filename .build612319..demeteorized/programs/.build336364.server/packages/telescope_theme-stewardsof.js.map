{"version":3,"sources":["telescope:theme-stewardsof//Applications/MAMP/websites/stewardsof/packages/telescope-theme-stewardsof/package-tap.i18n","telescope:theme-stewardsof/lib/custom_users.js","telescope:theme-stewardsof/lib/custom_posts.js","telescope:theme-stewardsof/lib/custom_fields.js","telescope:theme-stewardsof/lib/template_modules.js","telescope:theme-stewardsof/lib/callbacks.js","telescope:theme-stewardsof/lib/server/templates/custom_emailPostItem.handlebars","telescope:theme-stewardsof//Applications/MAMP/websites/stewardsof/packages/telescope-theme-stewardsof/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4H;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,G;AACA,c;AACA,uB;AACA,G;AACA,4C;AACA,W;AACA,gB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,e;AACA,kB;AACA,G;AACA,G;;AAEA,G;AACA,mB;AACA,uB;AACA,G;AACA,+C;AACA,K;AACA,uB;AACA,I;AACA,iB;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+G;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,iB;AACA,kB;AACA,mC;AACA,I;AACA,K;AACA,yC;AACA,I;AACA,sB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,uC;AACA,I;AACA,mB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,oC;AACA,mB;AACA,mC;AACA,sF;AACA,I;AACA,K;AACA,kF;AACA,I;AACA,c;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,oB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,oB;AACA,I;AACA,c;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,6D;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,oC;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,I;AACA,K;AACA,6E;AACA,I;AACA,S;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+B;AACA,I;AACA,oB;AACA,iB;AACA,mB;AACA,iB;AACA,kB;AACA,oC;AACA,oC;AACA,I;AACA,K;AACA,wC;AACA,I;AACA,oB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,qC;AACA,I;AACA,iB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,Y;AACA,iB;AACA,kC;AACA,iB;AACA,kB;AACA,mB;AACA,mC;AACA,G;AACA,G;;AAEA,G;AACA,e;AACA,uB;AACA,G;AACA,iC;AACA,Q;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,a;AACA,iB;AACA,qC;AACA,iB;AACA,kB;AACA,I;AACA,W;AACA,mB;AACA,kB;AACA,I;AACA,uB;AACA,iB;AACA,oC;AACA,kB;AACA,I;AACA,wB;AACA,kB;AACA,kB;AACA,I;AACA,c;AACA,e;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,kB;AACA,mB;AACA,0B;AACA,e;AACA,gB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,kB;AACA,I;AACA,yC;AACA,qC;AACA,kB;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,kB;AACA,G;AACA,G;;AAEA,gC;;AAEA,G;AACA,2C;AACA,G;AACA,iC;;AAEA,G;AACA,+B;AACA,G;;AAEA,a;AACA,wD;AACA,uD;AACA,G;;;;;;;;;;;;;;;;;;;;ACjOA,G;AACA,e;AACA,uB;AACA,G;AACA,iC;AACA,K;AACA,M;AACA,I;AACA,Q;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+B;AACA,I;AACA,c;AACA,e;AACA,kB;AACA,I;AACA,K;AACA,uE;AACA,I;AACA,a;AACA,e;AACA,mB;AACA,0B;AACA,e;AACA,qB;AACA,sC;AACA,K;AACA,I;AACA,K;AACA,O;AACA,I;AACA,Q;AACA,iB;AACA,mB;AACA,oC;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,K;AACA,S;AACA,I;AACA,U;AACA,iB;AACA,oB;AACA,0B;AACA,mC;AACA,I;AACA,K;AACA,Q;AACA,I;AACA,S;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,a;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,sD;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,gC;AACA,I;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,gD;AACA,I;AACA,e;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,oB;AACA,e;AACA,kB;AACA,I;AACA,K;AACA,uD;AACA,I;AACA,e;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,2D;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,0C;AACA,I;AACA,Y;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,yD;AACA,I;AACA,a;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,4C;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,2D;AACA,I;AACA,e;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,+C;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,6E;AACA,I;AACA,W;AACA,iB;AACA,mB;AACA,0B;AACA,4B;AACA,qC;AACA,uC;AACA,kE;AACA,mD;AACA,uC;AACA,4C;AACA,M;AACA,e;AACA,qB;AACA,yC;AACA,oB;AACA,K;AACA,I;AACA,K;AACA,iE;AACA,I;AACA,W;AACA,kB;AACA,mB;AACA,wB;AACA,0B;AACA,e;AACA,qB;AACA,yB;AACA,K;AACA,I;AACA,K;AACA,wF;AACA,I;AACA,a;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,0B;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,4B;AACA,I;AACA,W;AACA,iB;AACA,mB;AACA,0B;AACA,e;AACA,qB;AACA,4B;AACA,wD;AACA,kB;AACA,4B;AACA,6C;AACA,Y;AACA,W;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,oB;AACA,gC;;AAEA,G;AACA,oC;AACA,G;AACA,iC;;AAEA,a;AACA,iD;AACA,gD;AACA,G;;;;;;;;;;;;;;;;;;;;AChOA,oB;;AAEA,gB;AACA,+B;AACA,gB;AACA,iB;AACA,4B;AACA,mB;AACA,mC;AACA,G;AACA,G;;AAEA,mB;AACA,8B;AACA,mB;AACA,oB;AACA,6B;AACA,sB;AACA,sC;AACA,M;AACA,M;AACA,uB;;AAEA,sB;AACA,qC;AACA,mB;AACA,oB;AACA,sB;AACA,sC;AACA,M;AACA,M;;AAEA,oB;;AAEA,gB;AACA,+B;AACA,gB;AACA,iB;AACA,kB;AACA,mB;AACA,mC;AACA,G;AACA,G;;AAEA,uB;;AAEA,sB;AACA,sC;AACA,mB;AACA,oB;AACA,sB;AACA,kB;AACA,6B;AACA,Q;AACA,M;AACA,M;;;;;;;;;;;;;;;;;;ACvDA,uC;AACA,+B;AACA,oB;AACA,U;AACA,G;;;;;;;;;;;;;;;;;;ACJA,6B;AACA,sC;AACA,c;AACA,C;AACA,yD;;AAEA,iC;AACA,wC;AACA,iB;AACA,C;;AAEA,4D;;;;;;;;;;;;;;;;;;ACXA,otC;;;;;;;;;;;;;;;;;;ACAA,6B;AACA,gD;AACA,6C;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,wR;AACA,gD;AACA,mD","file":"/packages/telescope_theme-stewardsof.js","sourcesContent":["TAPi18n.packages[\"telescope:theme-stewardsof\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","/**\n * Vote schema\n * @type {SimpleSchema}\n */\nTelescope.schemas.votes = new SimpleSchema({\n  itemId: {\n    type: String\n  },\n  power: {\n    type: Number,\n    optional: true\n  },\n  votedAt: {\n    type: Date,\n    optional: true\n  }\n});\n\n/**\n * User Data schema\n * @type {SimpleSchema}\n */\nTelescope.schemas.userData = new SimpleSchema({\n  /**\n    Total comment count\n  */\n  commentCount: {\n    type: Number,\n    public: true,\n    optional: true\n  },\n  /**\n    The name displayed throughout the app. Can contain spaces and special characters, doesn't need to be unique\n  */\n  displayName: {\n    type: String,\n    optional: true,\n    public: true,\n    profile: true,\n    editableBy: [\"member\", \"admin\"]\n  },\n  /**\n    An array containing comment downvotes\n  */\n  downvotedComments: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    An array containing posts downvotes\n  */\n  downvotedPosts: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    The user's email. Modifiable.\n  */\n  email: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Email,\n    required: true,\n    editableBy: [\"member\", \"admin\"]\n    // unique: true // note: find a way to fix duplicate accounts before enabling this\n  },\n  /**\n    A hash of the email, used for Gravatar // TODO: change this when email changes\n  */\n  emailHash: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  /**\n    The user's karma\n  */\n  karma: {\n    type: Number,\n    decimal: true,\n    public: true,\n    optional: true\n  },\n  /**\n    Total post count\n  */\n  postCount: {\n    type: Number,\n    public: true,\n    optional: true\n  },\n  /**\n    A blackbox modifiable object to store the user's settings\n  */\n  settings: {\n    type: Object,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n  /**\n    The user's profile URL slug // TODO: change this when displayName changes\n  */\n  slug: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  /**\n    The user's Twitter username\n  */\n  twitterUsername: {\n    type: String,\n    optional: true,\n    public: true,\n    profile: true,\n    editableBy: [\"member\", \"admin\"],\n    template: \"user_profile_twitter\"\n  },\n  /**\n    An array containing comments upvotes\n  */\n  upvotedComments: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    An array containing posts upvotes\n  */\n  upvotedPosts: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    A link to the user's homepage\n  */\n  website: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    public: true,\n    profile: true,\n    optional: true,\n    editableBy: [\"member\", \"admin\"]\n  }\n});\n\n/**\n * Users schema\n * @type {SimpleSchema}\n */\nUsers.schema = new SimpleSchema({\n  _id: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  username: {\n    type: String,\n    // regEx: /^[a-z0-9A-Z_]{3,15}$/,\n    public: true,\n    optional: true\n  },\n  emails: {\n    type: [Object],\n    optional: true\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    public: true,\n    optional: true\n  },\n  isAdmin: {\n    type: Boolean,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      omit: true\n    }\n  },\n  profile: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  telescope: { // telescope-specific data\n    type: Telescope.schemas.userData,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nUsers.schema.internationalize();\n\n/**\n * Attach schema to Meteor.users collection\n */\nUsers.attachSchema(Users.schema);\n\n/**\n * Users collection permissions\n */\n\nUsers.allow({\n  update: _.partial(Telescope.allowCheck, Meteor.users),\n  remove: _.partial(Telescope.allowCheck, Meteor.users)\n});\n\n","/**\n * Posts schema\n * @type {SimpleSchema}\n */\nPosts.schema = new SimpleSchema({\n  /**\n    ID\n  */\n  _id: {\n    type: String,\n    optional: true\n  },\n  /**\n    Timetstamp of post creation\n  */\n  createdAt: {\n    type: Date,\n    optional: true\n  },\n  /**\n    Timestamp of post first appearing on the site (i.e. being approved)\n  */\n  postedAt: {\n    type: Date,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      type: \"bootstrap-datetimepicker\"\n    }\n  },\n  /**\n    URL\n  */\n  url: {\n    type: String,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    autoform: {\n      type: \"bootstrap-url\"\n    }\n  },\n  /**\n    Title\n  */\n  title: {\n    type: String,\n    optional: false,\n    label: \"Company Name\",\n    editableBy: [\"member\", \"admin\"]\n  },\n  /**\n    Slug\n  */\n  slug: {\n    type: String,\n    optional: true\n  },\n  /**\n    HTML version of the post body\n  */\n  htmlBody: {\n    type: String,\n    optional: true\n  },\n  /**\n    Count of how many times the post's page was viewed\n  */\n  viewCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    Count of the post's comments\n  */\n  commentCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of commenters\n  */\n  commenters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    Timestamp of the last comment\n  */\n  lastCommentedAt: {\n    type: Date,\n    optional: true\n  },\n  /**\n    Count of how many times the post's link was clicked\n  */\n  clickCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    The post's base score (not factoring in the post's age)\n  */\n  baseScore: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  /**\n    How many upvotes the post has received\n  */\n  upvotes: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of the post's upvoters\n  */\n  upvoters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    How many downvotes the post has received\n  */\n  downvotes: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of the post's downvoters\n  */\n  downvoters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    The post's current score (factoring in age)\n  */\n  score: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  /**\n    The post's status. One of pending (`1`), approved (`2`), or deleted (`3`)\n  */\n  status: {\n    type: Number,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoValue: function () {\n      // only provide a default value\n      // 1) this is an insert operation\n      // 2) status field is not set in the document being inserted\n      var user = Meteor.users.findOne(this.userId);\n      if (this.isInsert && !this.isSet)\n        return Posts.getDefaultStatus(user);\n    },\n    autoform: {\n      noselect: true,\n      options: Posts.config.postStatuses,\n      group: 'admin'\n    }\n  },\n  /**\n    Whether the post is sticky (pinned to the top of posts lists)\n  */\n  sticky: {\n    type: Boolean,\n    optional: true,\n    defaultValue: false,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      leftLabel: \"Sticky\"\n    }\n  },\n  /**\n    Whether the post is inactive. Inactive posts see their score recalculated less often\n  */\n  inactive: {\n    type: Boolean,\n    optional: true\n  },\n  /**\n    The post author's name\n  */\n  author: {\n    type: String,\n    optional: true\n  },\n  /**\n    The post author's `_id`.\n  */\n  userId: {\n    type: String,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      options: function () {\n        return Meteor.users.find().map(function (user) {\n          return {\n            value: user._id,\n            label: Users.getDisplayName(user)\n          };\n        });\n      }\n    }\n  }\n});\n\n// schema transforms\nPosts.schema.internationalize();\n\n/**\n * Attach schema to Posts collection\n */\nPosts.attachSchema(Posts.schema);\n\nPosts.allow({\n  update: _.partial(Telescope.allowCheck, Posts),\n  remove: _.partial(Telescope.allowCheck, Posts)\n});\n\n","// Custom Post Field\n\nPosts.addField({\n  fieldName: 'customPostField',\n  fieldSchema: {\n    type: String,\n    label: \"Impact Tagline\",\n    optional: true,\n    editableBy: [\"member\", \"admin\"]\n  }\n});\n\n// Posts.addField({\n//   fieldName: 'companyName',\n//   fieldSchema: {\n//     type: String,\n//     label: \"Company Name\",\n//     optional: true,\n//     editableBy: [\"member\", \"admin\"]\n//   }\n// });\n// Custom Comment Field\n\n// Comments.addField({\n//   fieldName: 'customCommentField',\n//   fieldSchema: {\n//     type: String,\n//     optional: true,\n//     editableBy: [\"member\", \"admin\"]\n//   }\n// });\n\n// Custom User Field\n\nUsers.addField({\n  fieldName: 'customUserField',\n  fieldSchema: {\n    type: String,\n    label: \"Role\",\n    optional: true,\n    editableBy: [\"member\", \"admin\"]\n  }\n});\n\n// Custom Setting Field\n\n// Settings.addField({\n//   fieldName: \"customSettingsField\",\n//   fieldSchema: {\n//     type: String,\n//     optional: true,\n//     autoform: {\n//       group: \"customGroup\"\n//     }\n//   }\n// });","// add template module to the hero zone\nTelescope.modules.add(\"hero\", {\n  template: 'hello',\n  order: 1\n});","function alertThanks (post) {\n  $('#post-thanks').addClass('shown');\n  return post;\n}\nTelescope.callbacks.add(\"postSubmitClient\", alertThanks);\n\nfunction inviteThanks (invited) {\n  $('#invite-thanks').addClass('shown');\n  return invited;\n}\n\nTelescope.callbacks.add(\"inviteSubmitClient\", inviteThanks);","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<div class=\\\"post-item\\\">\\n<br >\\n\\n<span class=\\\"post-title\\\">\\n  {{#if thumbnailUrl}}\\n    <img class=\\\"post-thumbnail\\\" src=\\\"http:{{thumbnailUrl}}\\\"/>&nbsp;\\n  {{/if}}\\n\\n  <a href=\\\"{{postLink}}\\\" target=\\\"_blank\\\">{{title}}</a>\\n</span>\\n\\n<div class=\\\"post-meta\\\">\\n  {{#if domain}}\\n    <a class=\\\"post-domain\\\" href=\\\"\\\">{{domain}}</a>\\n    | \\n  {{/if}}\\n  <span class=\\\"post-submitted\\\">Submitted by <a href=\\\"{{profileUrl}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{authorName}}</a></span>\\n  <span class=\\\"post-date\\\">on {{date}}</span>\\n  |\\n  <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{commentCount}} Comments</a>\\n  |  😀 😰 🐮\\n</div>\\n\\n\\n{{#if body}}\\n  <div class=\\\"post-body-excerpt\\\">\\n    {{{htmlBody}}}\\n    <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">Read more</a>\\n  </div>\\n{{/if}}\\n\\n\\n<br>\\n</div>\\n\\n\");Handlebars.templates[\"custom_emailPostItem\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"custom_emailPostItem\"});};","var _ = Package.underscore._,\n    package_name = \"telescope:theme-stewardsof\",\n    namespace = \"telescope:theme-stewardsof\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"customViewLink\":\"Custom View Link\",\"customAdminLink\":\"Custom Admin Link\",\"customPostField\":\"My Custom Post Field\",\"customCommentField\":\"My Custom Comment Field\",\"customUserField\":\"My Custom User Field\",\"customSettingsField\":\"My Custom Settings Field\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\nTAPi18n._registerServerTranslator(\"en\", namespace);\n"]}