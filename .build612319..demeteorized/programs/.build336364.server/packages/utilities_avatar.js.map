{"version":3,"sources":["utilities:avatar/utils.js","utilities:avatar/helpers.js","utilities:avatar/export.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,4G;AACA,0C;AACA,4B;AACA,gD;AACA,a;AACA,E;;;;;;;;;;;;;;;;;;ACLA,uD;AACA,wE;AACA,8B;AACA,6C;AACA,8D;AACA,6E;AACA,oI;AACA,2B;AACA,E;;AAEA,8C;AACA,sB;AACA,4F;;AAEA,kD;AACA,mD;AACA,2E;AACA,0E;AACA,G;AACA,Q;AACA,4B;AACA,G;;AAEA,iB;AACA,0E;AACA,wE;AACA,4E;AACA,iF;AACA,6B;AACA,qF;AACA,gB;AACA,I;;AAEA,yC;AACA,iD;AACA,E;;AAEA,6E;AACA,kC;AACA,kB;AACA,gH;AACA,4E;AACA,G;AACA,iC;AACA,iE;AACA,G;AACA,Q;AACA,6E;AACA,kD;AACA,qD;AACA,G;AACA,qB;AACA,E;;AAEA,6C;AACA,E;AACA,8G;AACA,yB;;AAEA,0C;;AAEA,uB;AACA,W;;AAEA,wB;;AAEA,2C;AACA,kB;;AAEA,Y;AACA,e;AACA,uB;AACA,sB;AACA,6B;AACA,Y;AACA,0B;AACA,4B;AACA,uB;AACA,sB;AACA,6B;AACA,mB;AACA,oB;AACA,Y;AACA,yB;AACA,sB;AACA,iC;AACA,Y;AACA,4B;AACA,yB;AACA,qC;AACA,iC;AACA,sB;AACA,0B;AACA,4B;AACA,0F;AACA,6B;AACA,qB;AACA,Y;AACA,wC;AACA,0C;AACA,6B;AACA,U;AACA,uC;AACA,yC;AACA,6B;AACA,Y;AACA,0C;AACA,wB;AACA,Y;AACA,gD;AACA,wB;AACA,S;AACA,I;;AAEA,sC;;AAEA,+C;AACA,E;AACA,mD;AACA,I;AACA,2C;AACA,kC;AACA,sC;AACA,iC;AACA,W;AACA,kD;AACA,yC;AACA,sC;AACA,U;AACA,G;;AAEA,sG;AACA,wG;AACA,uD;;AAEA,gE;AACA,C;;;;;;;;;;;;;;;;;;;ACxIA,+B;AACA,U;;AAEA,qE;AACA,2D;;AAEA,Y;;AAEA,4E;AACA,2C;AACA,8E;AACA,iF;AACA,uB;AACA,a;AACA,+C;AACA,qB;;AAEA,gE;AACA,iE;AACA,yE;AACA,wB;AACA,I;AACA,qF;AACA,kF;AACA,kF;AACA,yB;AACA,4B;AACA,I;AACA,mE;AACA,gC;AACA,uE;AACA,wB;;AAEA,6E;AACA,mD;AACA,0B;;AAEA,2E;AACA,yH;AACA,kG;AACA,uB;;AAEA,8D;AACA,iB;AACA,kB;AACA,kB;AACA,uB;AACA,K;AACA,I;;AAEA,iG;AACA,iE;;AAEA,iC;AACA,uD;AACA,gB;AACA,I;;AAEA,qD;AACA,kC;AACA,oF;AACA,I;;AAEA,iC;AACA,gC;;AAEA,sB;AACA,kB;AACA,mB;;AAEA,yD;AACA,gE;;AAEA,kC;AACA,kE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,K;AACA,U;AACA,sD;AACA,iC;AACA,O;AACA,uC;AACA,6B;AACA,O;;AAEA,8B;AACA,2E;AACA,sE;AACA,wD;AACA,6B;AACA,0D;AACA,O;AACA,K;;AAEA,oB;AACA,I;;AAEA,qC;AACA,2B;;AAEA,iB;AACA,wB;;AAEA,e;AACA,6B;AACA,8B;AACA,+D;AACA,6F;AACA,O;AACA,oC;AACA,sC;AACA,gG;AACA,O;AACA,kC;AACA,2C;AACA,O;AACA,kC;AACA,kG;AACA,O;AACA,qC;AACA,sD;AACA,O;AACA,oC;AACA,gD;AACA,O;AACA,kC;AACA,0E;AACA,O;AACA,gC;AACA,qF;AACA,uE;AACA,8C;AACA,8C;AACA,6E;AACA,gE;AACA,yD;AACA,S;AACA,+C;AACA,O;AACA,K;;AAEA,e;AACA,G;AACA,E;;AAEA,oH;;AAEA,sB","file":"/packages/utilities_avatar.js","sourcesContent":["// see http://stackoverflow.com/questions/8051975/access-object-child-properties-using-a-dot-notation-string\ngetDescendantProp = function (obj, desc) {\n  var arr = desc.split(\".\");\n  while(arr.length && (obj = obj[arr.shift()]));\n  return obj;\n};","// Get the account service to use for the user's avatar\n// Priority: Twitter > Facebook > Google > GitHub > Instagram > Linkedin\ngetService = function (user) {\n  var services = user && user.services || {};\n  var customProp = user && Avatar.options.customImageProperty;\n  if (customProp && getDescendantProp(user, customProp)) { return 'custom'; }\n  var service = _.find(['twitter', 'facebook', 'google', 'github', 'instagram', 'linkedin'], function(s) { return !!services[s]; });\n  return service || 'none';\n};\n\ngetGravatarUrl = function (user, defaultUrl) {\n  var gravatarDefault;\n  var validGravatars = ['404', 'mm', 'identicon', 'monsterid', 'wavatar', 'retro', 'blank'];\n\n  // Initials are shown when Gravatar returns 404.\n  if (Avatar.options.fallbackType !== 'initials') {\n    var valid = _.contains(validGravatars, Avatar.options.gravatarDefault);\n    gravatarDefault = valid ? Avatar.options.gravatarDefault : defaultUrl;\n  }\n  else {\n    gravatarDefault = '404';\n  }\n\n  var options = {\n    // NOTE: Gravatar's default option requires a publicly accessible URL,\n    // so it won't work when your app is running on localhost and you're\n    // using an image with either the standard default image URL or a custom\n    // defaultImageUrl that is a relative path (e.g. 'images/defaultAvatar.png').\n    default: gravatarDefault,\n    size: 200, // use 200x200 like twitter and facebook above (might be useful later)\n    secure: true\n  };\n\n  var emailOrHash = getEmailOrHash(user);\n  return Gravatar.imageUrl(emailOrHash, options);\n};\n\n// Get the user's email address or (if the emailHashProperty is defined) hash\ngetEmailOrHash = function (user) {\n  var emailOrHash;\n  if (user && Avatar.options.emailHashProperty && !!getDescendantProp(user, Avatar.options.emailHashProperty)) {\n    emailOrHash = getDescendantProp(user, Avatar.options.emailHashProperty);\n  }\n  else if (user && user.emails) {\n    emailOrHash = user.emails[0].address; // TODO: try all emails\n  }\n  else {\n    // If all else fails, return 32 zeros (trash hash, hehe) so that Gravatar\n    // has something to build a URL with at least.\n    emailOrHash = '00000000000000000000000000000000';\n  }\n  return emailOrHash;\n};\n\n// Creates the dynamically generated CSS file\n//\n// CSS is dynamically generated so that we can have both a custom class prefix and also allow for custom sizes\ncreateCSS = function () {\n\n  // We only need to do this on the server\n\n  if (!Meteor.isServer)\n    return;\n\n  // The base CSS styles\n\n  var p = '.' + Avatar.getCssClassPrefix();\n  var a = p + ' ';\n\n  var css = \n    p + ' { \\n\\\n      height: 50px; \\n\\\n      width: 50px; \\n\\\n      position: relative; \\n\\\n    } \\n' + \n    a + p + '-image, \\n' +\n    a + p + '-initials { \\n\\\n      height: 100%; \\n\\\n      width: 100%; \\n\\\n      position: absolute; \\n\\\n      top: 0px; \\n\\\n      left: 0px; \\n\\\n    } \\n' + \n    a + p + '-image { \\n\\\n      z-index: 10; \\n\\\n      background-color: #fff; \\n\\\n    } \\n' + \n    a + p + '-initials { \\n\\\n      display: block; \\n\\\n      background-size: 100% 100%; \\n\\\n      background-color: #aaa; \\n\\\n      color: #fff; \\n\\\n      font-size: 25px; \\n\\\n      line-height: 50px; \\n\\\n      font-family: \"Helvetica Neue\", Helvetica, \"Hiragino Sans GB\", Arial, sans-serif; \\n\\\n      text-align: center; \\n\\\n      z-index: 1; \\n\\\n    } \\n' + \n    p + '-rounded ' + p + '-image, \\n' +\n    p + '-rounded ' + p + '-initials { \\n\\\n      border-radius: 5px; \\n\\\n    } \\n'+\n    p + '-circle ' + p + '-image, \\n' +\n    p + '-circle ' + p + '-initials { \\n\\\n      border-radius: 50%; \\n\\\n    } \\n' + \n    p + '-hide-image ' + p + '-image { \\n\\\n      display: none; \\n\\\n    } \\n' + \n    p + '-hide-initials ' + p + '-initials { \\n\\\n      display: none; \\n\\\n    } \\n\\\n  ';\n\n  // CSS for each of the defined sizes\n\n  for (sizeName in Avatar.options.imageSizes) {\n  \n    var size = Avatar.options.imageSizes[sizeName];\n    \n    css = css + p + '-' + sizeName + ' {' +\n      'width: ' + size + 'px; ' + \n      'min-width: ' + size + 'px; ' + \n      'height: ' + size + 'px;' +\n    '}\\n' +\n    p + '-' + sizeName + ' ' + p + '-initials {' +\n      'font-size: ' + size / 2 + 'px; ' +\n      'line-height: ' + size + 'px;' +\n    '}\\n';\n  }\n\n  // In order to allow for custom sizes and a custom prefix we need to be able to create a style sheet\n  // on the fly. To do this cleanly we use the meteor-hacks:inject package to inject the styles directly\n  // into the HTML code before it's sent to the client.\n\n  Inject.rawHead('avatar-styles', '<style>' + css + '</style>');\n}\n","// Avatar object to be exported\nAvatar = {\n\n  // Default functionality. You can override these options by calling\n  // Avater.setOptions (do not set Avatar.options directly)\n\n  options: {\n\n    // Determines the type of fallback to use when no image can be found via\n    // linked services (Gravatar included):\n    //   \"default image\" (the default option, which will show either the image\n    //   specified by defaultImageUrl, the package's default image, or a Gravatar\n    //   default image)\n    //     OR\n    //   \"initials\" (show the user's initials).\n    fallbackType: '',\n\n    // This will replace the included default avatar image's URL\n    // ('packages/avatar/default.png'). It can be a relative path\n    // (relative to website's base URL, e.g. 'images/defaultAvatar.png').\n    defaultImageUrl: '',\n    \n    // This property name will be used to fetch an avatar url from the user's profile\n    // (e.g. 'avatar'). If this property is set and a property of that name exists\n    // on the user's profile (e.g. user.profile.avatar) that property will be used\n    // as the avatar url.\n    customImageProperty: '',\n    \n    // Gravatar default option to use (overrides default image URL)\n    // Options are available at:\n    // https://secure.gravatar.com/site/implement/images/#default-image\n    gravatarDefault: '',\n\n    // This property on the user object will be used for retrieving gravatars\n    // (useful when user emails are not published).\n    emailHashProperty: '',\n\n    // This property is used to prefix the CSS classes of the DOM elements.\n    // If no value is set, then the default CSS class assigned to all DOM elements are prefixed with 'avatar' as default.\n    // If a value is set to, 'foo' for example, the resulting CSS classes are prefixed with 'foo'.\n    cssClassPrefix: '',\n\n    // This property defines the various image sizes available\n    imageSizes: {\n      'large': 80,\n      'small': 30,\n      'extra-small': 20\n    }\n  },\n\n  // Sets the Avatar options. You must use this setter function rather than assigning directly to\n  // Avatar.options, otherwise the stylesheet won't be generated.\n\n  setOptions: function(options) {\n    Avatar.options = _.extend(Avatar.options, options);\n    createCSS();\n  },\n\n  // Returns the cssClassPrefix property from options\n  getCssClassPrefix: function () {\n    return (Avatar.options.cssClassPrefix)? Avatar.options.cssClassPrefix: 'avatar';\n  },\n\n  // Get the initials of the user\n  getInitials: function (user) {\n\n    var initials = '';\n    var name = '';\n    var parts = [];\n\n    if (user && user.profile && user.profile.firstName) {\n      initials = user.profile.firstName.charAt(0).toUpperCase();\n\n      if (user.profile.lastName) {\n        initials += user.profile.lastName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.familyName) {\n        initials += user.profile.familyName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.secondName) {\n        initials += user.profile.secondName.charAt(0).toUpperCase();\n      }\n    }\n    else {\n      if (user && user.profile && user.profile.name) {\n        name = user.profile.name;\n      }\n      else if (user && user.username) {\n        name = user.username;\n      }\n\n      parts = name.split(' ');\n      // Limit getInitials to first and last initial to avoid problems with\n      // very long multi-part names (e.g. \"Jose Manuel Garcia Galvez\")\n      initials = _.first(parts).charAt(0).toUpperCase();\n      if (parts.length > 1) {\n        initials += _.last(parts).charAt(0).toUpperCase();\n      }\n    }\n\n    return initials;\n  },\n\n  // Get the url of the user's avatar\n  getUrl: function (user) {\n\n    var url = '';\n    var defaultUrl, svc;\n\n    if (user) {\n      svc = getService(user);\n      if (svc === 'twitter') {\n        // use larger image (200x200 is smallest custom option)\n        url = user.services.twitter.profile_image_url_https.replace('_normal.', '_200x200.');\n      }\n      else if (svc === 'facebook') {\n        // use larger image (~200x200)\n        url = 'https://graph.facebook.com/' + user.services.facebook.id + '/picture?type=large';\n      }\n      else if (svc === 'google') {\n        url = user.services.google.picture;\n      }\n      else if (svc === 'github') {\n        url = 'https://avatars.githubusercontent.com/' + user.services.github.username + '?s=200';\n      }\n      else if (svc === 'instagram') {\n        url = user.services.instagram.profile_picture;\n      }\n      else if (svc === 'linkedin') {\n        url = user.services.linkedin.pictureUrl;\n      }\n      else if (svc === \"custom\") {\n        url = getDescendantProp(user, Avatar.options.customImageProperty);\n      }\n      else if (svc === 'none') {\n        defaultUrl = Avatar.options.defaultImageUrl || 'packages/avatar/default.png';\n        // If it's a relative path (no '//' anywhere), complete the URL\n        if (defaultUrl.indexOf('//') === -1) {\n          // Strip starting slash if it exists\n          if (defaultUrl.charAt(0) === '/') defaultUrl = defaultUrl.slice(1);\n          // Then add the relative path to the server's base URL\n          defaultUrl = Meteor.absoluteUrl() + defaultUrl;\n        }\n        url = getGravatarUrl(user, defaultUrl);\n      }\n    }\n\n    return url;\n  }\n};\n\n// Call setOptions to generate the default CSS. This will be replaced if the user calls setOptions in their own code\n\nAvatar.setOptions({});\n\n"]}